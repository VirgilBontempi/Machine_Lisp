options
{
  DEBUG_PARSER = false;
  STATIC = false;
}

PARSER_BEGIN(Reader)
package Gramm;
import model.*;
import java.io.*;

public class Reader
{
  /** le support de lecture */
  protected static java.io.Reader in = new BufferedReader(new InputStreamReader(System.in));

  //protected static Reader lereader = new Reader(in);
  /** lecture d'une S-EXPR au terminal
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
  public static void main(String [] args)
  {
    System.out.println(Reader.importe("test.txt"));
  }

  public static SExpr read() throws LispException
  {
    Reader lereader = new Reader(in);
    try
    {
      return lereader.SEXPRESSION();
    }
    catch (ParseException e)
    {
      throw new LispException("ce n'est pas une SExpr");
    }
  }

  /** lecture d'une S-EXPR à partir de la chaîne
* @param s : la chaîne
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
  public static SExpr read(String s) throws LispException
  {
    java.io.Reader sauv = in;
    in = new StringReader(s);
    SExpr r = read();
    in = sauv;
    return r;
  }

  /** évaluation de la séquence S-EXPRs à partir du fichier s
* @param s : le nom du fichier
* @return Sexpr : symbole du nom du fichier.
* @throws LispException une erreur de lecture
*/

  public static SExpr importe(String s) throws LispException
  {
    File f = new File(s);
    InputStream inputStr;
    try
    {
      inputStr = new FileInputStream(f);
      Reader lereader = new Reader(inputStr);
      try
      {
        lereader.SEXPRESSIONS();
        return Symbole.newSymbole("Chargement OK");
      }
      catch (ParseException e)
      {
        throw new LispException("ce n'est pas une SExpr");
      }
    }
    catch (FileNotFoundException e1)
    {
      throw new LispException("chargement fichier fail");
    }
  }

  private SExpr quote(SExpr s)
  {
    return new SCons(Symbole.newSymbole("quote"), new SCons(s, Nil.Nil));
  }

  private SExpr cons(SExpr s1, SExpr s2)
  {
    return new SCons(s1, s2);
  }
}

PARSER_END(Reader)

// les caractères ignorés
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
  // attention élimine la notion de fin de ligne
| ""
| "\u0001"
| "\u0002"
| "\u0003"
| "\u0004"
| "\u0005"
| "\u0006"
| "\u0007"
| "\u0008"
| "\u000b"
| "\u000c"
| "\u000e"
| "\u000f"
| "\u0010"
| "\u0011"
| "\u0012"
| "\u0013"
| "\u0014"
| "\u0015"
| "\u0016"
| "\u0017"
| "\u0018"
| "\u0019"
| "\u001a"
| "\u001b"
| "\u001c"
| "\u001d"
| "\u001e"
| "\u001f"
| "\u007f"
}

MORE :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

< IN_SL_COMMENT >
SPECIAL_TOKEN :
{
  < SL_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_ML_COMMENT >
SPECIAL_TOKEN :
{
  < ML_COMMENT : "*/" > : DEFAULT
}

< IN_SL_COMMENT, IN_ML_COMMENT >
SKIP :
{
  < ~[ ] >
} // les lexèmes du langage

TOKEN :
{
  < #LETTER : [ "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < POINT : "." >
| < QUOTE : "'" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < ID :
    (
      < LETTER >
    | < DIGIT >
    )+ >
}

SExpr SEXPRESSION() :
{SExpr s1;}
{s1 = SEXPR(){return s1;}}

void SEXPRESSIONS() :
{SExpr s1;}
{
  (s1 = SEXPRESSION(){s1.eval();})*< EOF >
}

SExpr SEXPR() :
{SExpr s1;}
{
  		s1 = ATOME(){return s1;}
	| 	< LPAREN > s1 = LIST() < RPAREN >{return s1;}
	| 	< QUOTE > s1 = SEXPR(){return quote(s1);}
}

SExpr LIST() :
{SExpr s1, s2;}
{
  s1 = SEXPR()(< POINT > s2 = SEXPR()| s2 = LIST()){return cons(s1, s2);}
|{return Nil.Nil;}
}

SExpr ATOME() :
{SExpr s1;}
{
  s1 = SYMBOLE()
  {return s1;}
}

SExpr SYMBOLE() :
{
  Token s1;
}
{
  s1 = < ID >{return Symbole.newSymbole(s1.image);}
}
